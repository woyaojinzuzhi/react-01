{"version":3,"sources":["pages/context.js","components/Control.js","pages/Demo02.js","pages/demo1.js","pages/App.js","pages/Hoc.js","components/Input.js","components/List1.js","pages/TodoList1.js","index.js"],"names":["Context","Component","React","createContext","Demo02","Consumer","data","map","item","key","Demo1","props","style","width","height","background","defaultProps","name","console","log","withFetch","Com","url","Topic","state","fetch","then","res","json","setState","this","displayName","Input","content","title","htmlFor","value","inpValue","type","onChange","e","handleChange","onClick","addTodo","List1","arr1","todos","filter","done","arr2","length","renderTodos","TodoList1","target","slice","alert","delTodo","idx","index","localStorage","setItem","JSON","stringify","toggle","newTodos","parse","todo","checked","dangerouslySetInnerHTML","__html","getItem","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.04abe7b6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;","import React, { Component } from 'react'\r\nimport './control.css';\r\n\r\n//组件名首字母一定要大写\r\nclass Control extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inpValue: '',\r\n            todos:[\r\n                {title:'1',done:false},\r\n                {title:'2',done:true},\r\n                {title:'3',done:true},\r\n                {title:'4',done:false}\r\n            ]\r\n        }\r\n    }\r\n    handleChange = (e) =>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n    componentDidMount(){\r\n        this.input.focus();\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n                todos: JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n        return true\r\n    }\r\n\r\n    addTodo = () => {\r\n        if(this.state.inpValue.slice(0,1) == \" \"){\r\n            alert(\"输入不能为空\");\r\n            return;\r\n        }\r\n        this.setState({\r\n            todos: [\r\n                {\r\n                    title:this.state.inpValue,\r\n                    done:false\r\n                },\r\n                ...this.state.todos       \r\n            ]\r\n        })\r\n        this.state.inpValue = \" \";\r\n    }\r\n\r\n    delTodo = (idx) => {\r\n        // let newTodos = JSON.parse(JSON.stringify(this.state.todos))  //为了返回一个有新地址的值，深拷贝\r\n        // newTodos.splice(idx,1);\r\n        // this.setState({todos:newTodos})\r\n\r\n        this.setState({\r\n            todos: this.state.todos.filter((item,index) => index != idx)\r\n        },()=>{\r\n            localStorage.setItem(\r\n                'todos',\r\n                JSON.stringify(this.state.todos)\r\n            )\r\n        });\r\n        \r\n    }\r\n\r\n    toggle = (index) => {\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos));\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos:newTodos\r\n        })\r\n    }\r\n\r\n    renderTodos = (done) => {\r\n        return this.state.todos.map((todo,idx) => {\r\n            if(done == todo.done){\r\n                return <li>\r\n                    <input \r\n                        onClick = {()=>this.toggle(idx)}\r\n                        checked={done} \r\n                        type='checkbox'\r\n                    />\r\n                    {/* <span>{todo.title} </span> */}\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                    <button onClick={() => this.delTodo(idx)}>删除</button>\r\n                    <br/>\r\n                    <br/>\r\n                </li>\r\n            }\r\n        })\r\n    }\r\n    //只要给input设置value属性，内部内容就无法更改\r\n    //label标签使输入框选中\r\n    render() {\r\n        const {todos,inpValue} = this.state;\r\n        let arr1 = todos.filter(item => !item.done);\r\n        return (\r\n            <div className='box'>\r\n                <label htmlFor=\"inp\">Todolist</label>  \r\n                <input\r\n                ref={inp=>this.input = inp}\r\n                value = {this.state.inpValue} type='text' onChange = {this.handleChange}/>\r\n                <button onClick={this.addTodo}>添加</button>\r\n                <h2>正在进行{arr1.length}</h2>\r\n                <ul>\r\n                    {\r\n                        this.renderTodos(false)\r\n                    }\r\n                </ul>\r\n                <h2>已经完成</h2>\r\n                <ul style={{color:'red'}}>\r\n                    {\r\n                        this.renderTodos(true)\r\n                    }\r\n                </ul>\r\n                <button>{3>2?'登录':'注销'}</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Control;\r\n\r\n","import React from 'react'\r\nimport Context from './context';\r\n\r\nconst Demo02 = () => {\r\n    return (\r\n        <div>\r\n            <h2>Demo02</h2>\r\n            <Context.Consumer>\r\n                {\r\n                    ({data}) => data.map(\r\n                        item => <li key = {item}>{item}</li>\r\n                    )\r\n                }\r\n            </Context.Consumer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Demo02\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Context from './context'\r\nimport Demo02 from './Demo02'\r\n\r\nconst Demo1 = (props) => {\r\n    return (\r\n        <div style={{width:100,height:100,background:'red'}}>\r\n            <ul>\r\n                <Context.Consumer>\r\n                    {\r\n                        (data) => {\r\n                            return data.data.map((item) => <li>{item}</li>)\r\n                        }\r\n                        // data => data.data.map(\r\n                        //     item => <li key = {item}>{item}</li>\r\n                        //)\r\n                    }\r\n                </Context.Consumer>\r\n            </ul>\r\n            <Demo02 />\r\n        </div>\r\n    )\r\n}\r\n\r\nDemo1.propTypes = {\r\n    name: PropTypes.string.isRequired\r\n}\r\n\r\nDemo1.defaultProps = {\r\n    name: 'tom'\r\n}\r\n\r\nexport default Demo1\r\n\r\n\r\n//rcc\r\n//rafc\r\n//rafce\r\n//rfc","import React from 'react';\r\nimport Context from './context';\r\nimport Demo1 from './demo1';\r\n\r\n\r\nconsole.log(Context);\r\n\r\n// const App = () => {\r\n//     let data = {data: ['hello','context']}\r\n//     return (\r\n//         <Context.Provider value={data}>\r\n//             <Demo1 />\r\n//         </Context.Provider>\r\n//     )\r\n// }\r\n\r\nclass App extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            data:['hello',this.context],\r\n        }\r\n    }\r\n    changeData = (newData) => {\r\n        this.setState({data:[...this.state.data,newData]})\r\n    }\r\n    render(){\r\n        return(\r\n        <Context.Provider value={{\r\n            data:this.state.data,\r\n            changeData:this.changeData\r\n        }}>\r\n            <Demo1 />\r\n        </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n\r\n","// higher order component\r\nimport React, { Component } from 'react'\r\n\r\nconst withFetch = (Com,url) => {\r\n    class Topic extends Component {\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                data: []\r\n            }\r\n        }\r\n        componentDidMount(){\r\n            fetch(url)\r\n            .then(res => res.json())\r\n            .then(res => this.setState({data:res.data}))\r\n        }\r\n        render(){\r\n            return <Com {...this.props} data={this.state.data}/>\r\n        }\r\n    }\r\n    Topic.displayName = `withFetch(${Com.name})`\r\n    return Topic;\r\n}\r\n\r\n const De = (props) => {\r\n    // constructor(){\r\n    //     super();\r\n    //     this.state = {\r\n    //         data: ''\r\n    //     }\r\n    // }\r\n    // componentDidMount(){\r\n    //     fetch('https://cnodejs.org/api/v1/topic/5433d5e4e737cbe96dcef312')\r\n    //     .then(res => res.json())\r\n    //     .then(res => this.setState({data:res.data.content}))\r\n    // }\r\n    // render(){\r\n    //     return <div>\r\n    //         <h1>标题</h1>\r\n    //         <div>{this.state.data}</div>\r\n    //     </div>\r\n    // }\r\n    return <div>\r\n        <h1>标题</h1>\r\n        <div>{props.data.content}</div>\r\n    </div>\r\n}\r\n\r\nexport const Detail = withFetch(De,'https://cnodejs.org/api/v1/topic/5433d5e4e737cbe96dcef312');\r\n\r\n// export class Hoc extends Component {\r\n//     // constructor(){\r\n//     //     super();\r\n//     //     this.state = {\r\n//     //         data:[]\r\n//     //     }\r\n//     // }\r\n//     // componentDidMount(){\r\n//     //     fetch('https://cnodejs.org/api/v1/topics')\r\n//     //     .then(res => res.json())\r\n//     //     .then(res => this.setState({data:res.data}))\r\n//     // }\r\n//     // render() {\r\n//     //     console.log(this.state.data);\r\n//     //     return (\r\n//     //         <div>\r\n//     //             Hoc\r\n//     //         </div>\r\n//     //     )\r\n//     // }\r\n// }\r\nconst Ho = (props) => {\r\n    return <ul>\r\n        {\r\n            props.data.map((item) => <li>{item.title}</li>)\r\n        }\r\n    </ul>\r\n}\r\nconst Hoc = withFetch(Ho,'https://cnodejs.org/api/v1/topics');\r\n\r\nexport default Hoc\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Input extends Component {\r\n    constructor(props){\r\n        super();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <label htmlFor=\"inp\">Todolist</label>  \r\n                <input\r\n                value = {this.props.inpValue} type='text' onChange = {(e) => this.props.handleChange(e)}/>\r\n                <button onClick={() => this.props.addTodo()}>添加</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nclass List1 extends Component {\r\n    constructor(props){\r\n        super();\r\n    }\r\n    \r\n\r\n    render() {\r\n        let arr1 = this.props.todos.filter(item => !item.done);\r\n        let arr2 = this.props.todos.filter(item => item.done);\r\n        return (\r\n            <div>\r\n                <h2>正在进行{arr1.length}</h2>\r\n                <ul>\r\n                    {\r\n                        this.props.renderTodos(false)\r\n                    }\r\n                </ul>\r\n                <h2>已经完成{arr2.length}</h2>\r\n                <ul>\r\n                    {\r\n                        this.props.renderTodos(true)\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List1","import React, { Component } from 'react'\r\nimport Input from '../components/Input'\r\nimport List1 from '../components/List1'\r\n\r\nexport default class TodoList1 extends Component {\r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            inpValue: '',\r\n            todos:[\r\n                {title:'1',done:false},\r\n                {title:'2',done:true},\r\n                {title:'3',done:true},\r\n                {title:'4',done:false}\r\n            ]\r\n        }\r\n    }\r\n\r\n    \r\n    handleChange = (e) =>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n    componentDidMount(){\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n                todos: JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n        return true\r\n    }\r\n\r\n    addTodo = () => {\r\n        if(this.state.inpValue.slice(0,1) == \" \"){\r\n            alert(\"输入不能为空\");\r\n            return;\r\n        }\r\n        this.setState({\r\n            todos: [\r\n                {\r\n                    title:this.state.inpValue,\r\n                    done:false\r\n                },\r\n                ...this.state.todos       \r\n            ]\r\n        })\r\n        this.state.inpValue = \" \";\r\n    }\r\n\r\n    delTodo = (idx) => {\r\n\r\n        this.setState({\r\n            todos: this.state.todos.filter((item,index) => index != idx)\r\n        },()=>{\r\n            localStorage.setItem(\r\n                'todos',\r\n                JSON.stringify(this.state.todos)\r\n            )\r\n        });\r\n        \r\n    }\r\n\r\n    toggle = (index) => {\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos));\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos:newTodos\r\n        })\r\n    }\r\n\r\n    renderTodos = (done) => {\r\n        return this.state.todos.map((todo,idx) => {\r\n            if(done == todo.done){\r\n                return <li>\r\n                    <input \r\n                        onClick = {()=>this.toggle(idx)}\r\n                        checked={done} \r\n                        type='checkbox'\r\n                    />\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                    <button onClick={() => this.delTodo(idx)}>删除</button>\r\n                    <br/>\r\n                    <br/>\r\n                </li>\r\n            }\r\n        })\r\n    }\r\n    \r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"tdl1\">\r\n                <Input \r\n                addTodo = {this.addTodo}\r\n                handleChange = {this.handleChange}\r\n                />\r\n                <List1 \r\n                todos = {this.state.todos}\r\n                renderTodos = {this.renderTodos}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM, { render } from 'react-dom';\n   //./App可以识别为./App.js\n// import {Home} from './pages/Home.js';\nimport Control from './components/Control';\nimport Demo1 from './pages/demo1';\nimport App from './pages/App';\n// import Hoc from './pages/Hoc';\nimport Hoc,{Detail} from './pages/Hoc';\nimport Hook from './pages/Hook';\nimport Context from './pages/context';\nimport TodoList1 from './pages/TodoList1';\n\n\n// const Buttons = () => {\n//   const btns = [1,2,3,,4,5];\n//   const handleClick = (num) => {\n//     //事件对象\n//     console.log(num);\n//   }\n//   return <div>\n//     {\n//       btns.map(\n//         (item) => \n//         <button \n//           key={item}\n//           onClick = {() => handleClick(item)}\n//         >\n//           {item}\n//         </button>\n//         )\n//     }\n//   </div>\n// }\n\n// class Home extends React.Component{\n//   constructor(){\n//     super();\n//     this.state = {\n//       data:[]\n//     }\n//   }\n\n\n//   render(){\n//     const {data} = this.state;\n//     return <ul>\n//       {\n//         data.map(\n//           (item) => <li>{item.title}</li>\n//         )\n//       }\n//       <li>1</li>\n//     </ul>\n//   }\n//   componentDidMount(){\n//     fetch('https://cnodejs.org/api/v1/topics')\n//     .then(res=>res.json())\n//     .then(({data}) => {\n//       this.setState({data});\n//     })\n//   }\n//   handleClick = () => {\n//     console.log(this);\n//   }\n//   getData = (page) => {\n//     fetch('https://cnodejs.org/api/v1/topics?page='+page)\n//     .then(res => res.json())\n//     .then(({data}) => {\n//       this.setState({data})\n//     })\n//   }\n//   render(){\n//     const {data} = this.state;\n//     const btns = [1,2,3,4,5];\n//     return <div>\n      \n//       {\n//       btns.map(\n//         (item) => \n//         <button \n//           key={item}\n//           onClick = {() => this.getData(item)}\n//         >\n//           {item}\n//         </button>\n//       )}\n//     <List data={data}/>\n//     </div>\n//   }\n// }\n\n\n//alt + shift + 上下键     复制一行\n//alt + 上下键             移动一行\n//按住alt键 + 鼠标点击      多个位置同时输入\n//ctrl + shift + 左右键    选中前后整个单词\n//ctrl + shift + L         选中对应的所有词\n\n\nReactDOM.render(\n  <TodoList1 />,\n  // ele,\n  document.getElementById('root')\n);\n{/* <Context.Provider value='123'>\n    <Hook/>\n  </Context.Provider> */}\n// ReactDOM.render(\n//   <h1>hello react</h1>,\n//   document.getElementById('root')\n// );\n\n\n// let ele = React.createElement(\n//   'h1',\n//   {id:'title'},\n//   'hello React'\n// )\n\n//将jsx对象渲染到DOM中\n// let ReactDOM = {\n//   render(eleObj,container){\n//     //解构\n//     const {type,props} = eleObj;\n//     //创建第一层节点\n//     let ele = document.createElement(type);\n//     //遍历属性对象，将属性添加到第一层节点对象上\n//     for (const prop in props) {\n//       // if(prop == 'className'){\n//       //   ele.setAttribute('class',props[prop]);\n//       //   // ele[prop] = props[prop];  和上面一样都可以\n//       // }\n//       if(prop == 'children'){\n//         if(typeof props.children == 'string'){\n//           const txtNode = document.createTextNode(props.children);\n//           ele.appendChild(txtNode);\n//           break;\n//         }\n\n//         //将第一层节点对象的子元素添加进去\n//         props.children.forEach((child) => {\n//           if(typeof child == 'string'){\n//             const txtNode = document.createTextNode(child);\n//             ele.appendChild(txtNode);\n//           }else{\n//             ReactDOM.render(child,ele);\n//           }\n//         })\n//       }else{\n//         ele[prop] = props[prop];\n//       }\n//       //上面的方法id和class都可以加上，前面的不可以\n//     }\n\n//     //将第一层节点添加到container中\n//     container.appendChild(ele);\n//   }\n// }\n\n//组件声明\n//函数组件\n//UI（展示）组件，木偶组件\n\n// function App(props){\n//   const {title,id} = props;\n//   return <div>\n//     <div>{props.title}</div>\n//     <div>{id}</div>\n//   </div>\n// }\n\n// let ele = <h1 id='title' className='tit'>\n//     <div>当前时间</div>\n//     {new Date().toLocaleString()}\n// </h1>;\n\n//智能组件\n// class Demo extends React.Component{\n//   render(){\n//     return <div>\n//       <App title='任意值' id='app'/>\n//       <App title='任意值' id='app'/>\n//     </div>\n//   }\n// }\n\n// class Demo extends React.Component{\n//   constructor(){\n//     super();\n//     this.state = {\n//       name: new Date().toLocaleString()\n//     }\n//     setInterval(() => {\n//       this.setState({name:new Date().toLocaleString()})\n//     },1000)\n//   }\n//   render(){\n//     return <div>\n//       <div>name:{this.state.name}</div>\n//       <App title={this.state.name} id='app'/>\n//     </div>\n//   }\n// }\n\n\n\n// ReactDOM.render(\n//   <Demo />,\n//   // ele,\n//   document.getElementById('root')\n// );"],"sourceRoot":""}